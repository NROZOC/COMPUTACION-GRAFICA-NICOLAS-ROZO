<html><head>
		<title>PARCIAL</title>
		<style>
			html,body { margin: 0; padding: 0; overflow: hidden;}
            #info {
                position: absolute;
                padding: 10px;
                width: 100%;
                text-align: center;
                color: #FFFF00;
            }
        </style>	
    </head>	
<body>		
    <script src="js/three.min.js"></script>		
    <script>                     
        var scene, aspect, camera, renderer;    
        var startTime = Date.now();
        

        var hips, torso, head;
        var rightFoot, rightLeg, rightArm, rightHand;
        var leftFoot, leftLeg, leftArm, leftHand;

        var upArrow = false;
		var downArrow = false;
		var leftArrow = false;
        var rightArrow = false;

        var thetaSum = 0;
        var positivo = false;
		
		init();
		animate();
        function init() {

            scene = new THREE.Scene();
            aspect = window.innerWidth / window.innerHeight
            camera = new THREE.PerspectiveCamera(45, aspect, 0.1, 1000);
            renderer = new THREE.WebGLRenderer();
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);
                     
            var size = 50;
            var divisions = 50;
            var origin = new THREE.Vector3(0, 0, 0);
            var x = new THREE.Vector3(1, 0, 0);
            var y = new THREE.Vector3(0, 1, 0);
            var z = new THREE.Vector3(0, 0, 1);

                


            var onKeyDown = function (event) {
                switch (event.keyCode) {
                    case 38: // TRASLADAR ADELANTE
                        upArrow = true;
                        break;
                    case 40: // TRASLADAR ATR√ÅS
                        downArrow = true;
                        break;
                    case 37: // ROTAR CW
                        leftArrow = true;
                        break;
                    case 39: // ROTAR CCW
                        rightArrow = true;
                        break;
                }
            };

            var onKeyUp = function (event) {
                switch (event.keyCode) {
                    case 38: // TRASLADAR
                        upArrow = false;
                        break;
                    case 40: // TRASLADAR
                        downArrow = false;
                        break;
                    case 37: // ROTAR CW
                        leftArrow = false;
                        break;
                    case 39: // ROTAR CCW
                        rightArrow = false;
                        break;
                }
            };


            document.addEventListener('keydown', onKeyDown, false);
            document.addEventListener('keyup', onKeyUp, false);			

//hacer plano con cuadricula
                          
            var gridHelperXY = new THREE.GridHelper(size, divisions);
            var gridHelperXZ = new THREE.GridHelper(size, divisions, 0xfff000, 0xffff0);
            var gridHelperYZ = new THREE.GridHelper(size, divisions);

            gridHelperXY.rotateOnWorldAxis(x, THREE.Math.degToRad(90));
            gridHelperXZ.rotateOnWorldAxis(y, THREE.Math.degToRad(90));
            gridHelperYZ.rotateOnWorldAxis(z, THREE.Math.degToRad(90));
                    
//EDIFICIO                      
               

            var geometry = new THREE.BoxBufferGeometry(4, 5, 6);
            var geometry2 = new THREE.BoxBufferGeometry(13, 5, 3);
            var geometry3 = new THREE.BoxBufferGeometry(10, 3, 3);
            var geometry4 = new THREE.BoxBufferGeometry(5, 7, 6);
            var geometry5 = new THREE.BoxBufferGeometry(17, 7, 4);
            var geometry11 = new THREE.BoxBufferGeometry(11, 3, 11); 
            var geometry16 = new THREE.BoxBufferGeometry(4, 3, 4); 
            var material = new THREE.MeshBasicMaterial({ color: 0xffff00 });
            var material2 = new THREE.MeshBasicMaterial({ color: 0xff000f });
            var material3 = new THREE.MeshBasicMaterial({ color: 0xE7710A });
            var material4 = new THREE.MeshBasicMaterial({ color: 0x4BF820 });
            var material10 = new THREE.MeshBasicMaterial({ color: 0xffff00 });
            var material13 = new THREE.MeshBasicMaterial({ color: 0xBC81EE });
            var cube = new THREE.Mesh(geometry, material);
            var cube1 = new THREE.Mesh(geometry, material);
            var cube2 = new THREE.Mesh(geometry, material);
            var cube3 = new THREE.Mesh(geometry2, material3);           
            var cube4 = new THREE.Mesh(geometry3, material2);
            var cube5 = new THREE.Mesh(geometry4, material2);
            var cube6 = new THREE.Mesh(geometry5, material4);
            var cube7 = new THREE.Mesh(geometry11, material10);
            var cube8 = new THREE.Mesh(geometry16, material13);


            var geometry6 = new THREE.ConeGeometry(2, 1.75, 32);
            var material5 = new THREE.MeshBasicMaterial({ color: 0xDD00FF });
            var cone = new THREE.Mesh(geometry6, material5);
            var geometry7 = new THREE.PlaneGeometry(15, 8, 30);
            var geometry12 = new THREE.PlaneGeometry(40, 4, 30);
            var geometry13 = new THREE.PlaneGeometry(4, 25, 30);
            var geometry14 = new THREE.PlaneGeometry(4, 46, 30);
            var material6 = new THREE.MeshBasicMaterial({ color: 0x0000ff, side: THREE.DoubleSide });           
            var material11 = new THREE.MeshBasicMaterial({ color: 0xFFFFFF, side: THREE.DoubleSide });
            var plane = new THREE.Mesh(geometry7, material6);
            var plane2 = new THREE.Mesh(geometry7, material6);
            var plane3 = new THREE.Mesh(geometry12, material11);
            var plane4 = new THREE.Mesh(geometry14, material11);
            var plane5 = new THREE.Mesh(geometry13, material11);
            var plane6 = new THREE.Mesh(geometry12, material11);


            var geometry8 = new THREE.CylinderGeometry(.3, .3, 4, 32);
            var geometry15 = new THREE.CylinderGeometry(3, 3, 3, 8);
            var material7 = new THREE.MeshBasicMaterial({ color: 0xffff00 });
            var material12 = new THREE.MeshBasicMaterial({ color: 0xBC81EE });
            var cylinder = new THREE.Mesh(geometry8, material7);
            var cylinder2 = new THREE.Mesh(geometry8, material7);
            var cylinder3 = new THREE.Mesh(geometry8, material7);
            var cylinder4 = new THREE.Mesh(geometry8, material7);
            var cylinder5 = new THREE.Mesh(geometry8, material7);
            var cylinder6 = new THREE.Mesh(geometry8, material7);
            var cylinder7 = new THREE.Mesh(geometry15, material12);

//BLOQUE B
            cube.position.x = 6;
            cube.position.y = 2.5;
            cube.position.z = -8;
//BLOQUE C
            cube1.position.x = 0;
            cube1.position.y = 2.5;
            cube1.position.z = -8;
//BLOQUE D
            cube2.position.x = -6;
            cube2.position.y = 2.5;
            cube2.position.z = -8;
//UNION BLOQUE B C D
            cube3.position.x = 0;
            cube3.position.y = 2.5;
            cube3.position.z = -3.5;
//UNION BLOQUE A B
            cube4.position.x = 10;
            cube4.position.y = 1.5;
            cube4.position.z = -7;
//BLOQUE A
            cube5.position.x = 16;
            cube5.position.y = 3.5;
            cube5.position.z = -8;
//BLOQUE E
            cube6.position.x = 0;
            cube6.position.y = 3.5;
            cube6.position.z = -12;
//CAFE LEYENDA
            cone.position.x = 12;
            cone.position.y = 1.5;
            cone.position.z = -3;
//CANCHAS
            plane.rotateX(1.57)
            plane.position.x = 15;
            plane.position.y = 0.1;
            plane.position.z = 9;
            plane2.rotateX(1.57)
            plane2.position.x = 15;
            plane2.position.y = 0.1;
            plane2.position.z = 19;
//POSTES
            cylinder.position.x = 9;
            cylinder.position.y = 2;
            cylinder.position.z = 14;
            cylinder2.position.x = 9;
            cylinder2.position.y = 2;
            cylinder2.position.z = 4;
            cylinder3.position.x = 9;
            cylinder3.position.y = 2;
            cylinder3.position.z = 24;
            cylinder4.position.x = 21;
            cylinder4.position.y = 2;
            cylinder4.position.z = 4;
            cylinder5.position.x = 21;
            cylinder5.position.y = 2;
            cylinder5.position.z = 14
            cylinder6.position.x = 21;
            cylinder6.position.y = 2;
            cylinder6.position.z = 24;
//AULA MAXIMA
            cube7.position.x = -8;
            cube7.position.y = 1.5;
            cube7.position.z = 12; 
//CARRETERA
            plane3.rotateX(1.57)
            plane3.position.x = 3;
            plane3.position.y = 0.1;
            plane3.position.z = 1;
            plane4.rotateX(1.57)
            plane4.position.x = -17;
            plane4.position.y = 0.1;
            plane4.position.z = 0;
            plane5.rotateX(1.57)
            plane5.position.x = 21;
            plane5.position.y = 0.1;
            plane5.position.z = -10.5;
            plane6.rotateX(1.57)
            plane6.position.x = 3;
            plane6.position.y = 0.1;
            plane6.position.z = -21;
//ENTRADA
            cylinder7.position.x = 2;
            cylinder7.position.y = 1.5;
            cylinder7.position.z = 22;
            cube8.position.x = 4;
            cube8.position.y = 1.5;
            cube8.position.z = 22;
//PERSONA ANIMADA

            geometry9 = new THREE.BoxGeometry(1, 1, 1);
            geometry10 = new THREE.CylinderGeometry(.5, .5, 1, 32);
            var material8 = new THREE.MeshBasicMaterial({ color: 0x00FBFF });
            var material9 = new THREE.MeshBasicMaterial({ color: 0xE31437 });


            hips = new THREE.Mesh(geometry9, material8);	
            hips.applyMatrix(new THREE.Matrix4().makeTranslation(0, 2, 0));

            leftFoot = hips.clone();	
               
            torso = new THREE.Mesh(geometry10, material9); 

            leftLeg = torso.clone();	
                
            leftLeg.applyMatrix(new THREE.Matrix4().makeScale(.5, 2, .5));

            rightLeg = leftLeg.clone();

            leftLeg.applyMatrix(new THREE.Matrix4().makeTranslation(-.5, -1, 0));
            rightLeg.applyMatrix(new THREE.Matrix4().makeTranslation(.5, -1, 0));
			
            rightFoot = leftFoot.clone();

            leftFoot.applyMatrix(new THREE.Matrix4().getInverse(leftLeg.matrix));
            leftFoot.applyMatrix(new THREE.Matrix4().makeScale(.5, .5, 1));
            rightFoot.applyMatrix(new THREE.Matrix4().getInverse(rightLeg.matrix));
            rightFoot.applyMatrix(new THREE.Matrix4().makeScale(.5, .5, 1));
            leftFoot.applyMatrix(new THREE.Matrix4().makeTranslation(-.5, -1.25, 0));
            rightFoot.applyMatrix(new THREE.Matrix4().makeTranslation(.5, -1.25, 0));	
            torso.applyMatrix(new THREE.Matrix4().makeTranslation(0, 1, 0));
		  
                
            hips.add(torso);
            hips.add(leftLeg);
            hips.add(rightLeg);
            leftLeg.add(leftFoot);
            rightLeg.add(rightFoot);


            scene.add(gridHelperXZ);                 
            scene.add(cube);
            scene.add(cube1);
            scene.add(cube2);
            scene.add(cube3);
            scene.add(cube4);
            scene.add(cube5);
            scene.add(cube6);
            scene.add(cube7);
            scene.add(cube8);
            scene.add(cone);
            scene.add(plane);
            scene.add(plane2);
            scene.add(plane3);
            scene.add(plane4);
            scene.add(plane5);
            scene.add(plane6);
            scene.add(cylinder);
            scene.add(cylinder2);
            scene.add(cylinder3);
            scene.add(cylinder4);
            scene.add(cylinder5);
            scene.add(cylinder6);
            scene.add(cylinder7);
            scene.add(hips);
                        
            camera.position.x = 5;
            camera.position.y = 10;
            camera.position.z = 10;
            camera.lookAt(origin);

            renderer.render(scene, camera);
        }
    
    function animate() {
        render();
        requestAnimationFrame( animate );
    }
    
        function render() {
            var origen = new THREE.Vector3(0, 0, 0);
            var dtime = Date.now() - startTime;
            var tx = 0, ty = 0, tz = 0;	
            var theta = 0;			
            var sigma = 0;			
		
            if (thetaSum >= 60 * Math.PI / 180)
                positivo = false;
            if (thetaSum <= -60 * Math.PI / 180)
                positivo = true;
		
            if (upArrow)
            {
                tx = 0; ty = 0; tz = .1;
                if (positivo)
                    theta = .1;
                else
                    theta = -.1;
            }
            if (downArrow)
            {
                tx = 0; ty = 0; tz = -.1;
                if (positivo)
                    theta = .1;
                else
                    theta = -.1;
            }
            thetaSum += theta;
		
            if (rightArrow)
                sigma = -.1;
            if (leftArrow)
                sigma = .1;
            
		//MATRIZ DE TRASLACI√ìN
            var t = new THREE.Matrix4();
            t.set(1, 0, 0, tx,
                0, 1, 0, ty, 
				0, 0, 1, tz,
				0, 0, 0, 1	);
		
            hips.matrix.multiply(t); 	//APLICAR LA TRASLACI√ìN A NIVEL LOCAL
		
		//ROTACIONES
            var ct1 = Math.cos(theta);
            var ct2 = Math.cos(-theta);
            var cs = Math.cos(sigma);
            var st1 = Math.sin(theta);
            var st2 = Math.sin(-theta);
            var ss = Math.sin(sigma);
            var r = new THREE.Matrix4();
            var r1 = new THREE.Matrix4();
            var r2 = new THREE.Matrix4();

		//MATRIZ DE ROTACI√ìN EN EJE Y
            r.set(cs, 0, ss, 0,
                0, 1, 0, 0, 
                -ss, 0, cs, 0,
                0, 0, 0, 1);	
		//MATRICES DE ROTACI√ìN EN EJE LOCAL DE PIERNAS	
            r1.set(1, 0, 0, 0,
                0, ct1, -st1, 0, 
                0, st1, ct1, 0,
                0, 0, 0, 1);	
            r2.set(1, 0, 0, 0,
                0, ct2, -st2, 0, 
                0, st2, ct2, 0,
                0, 0, 0, 1);							
		
		//ROTACION EN UN EJE PARALELO
            var tempMatrix = new THREE.Matrix4();
            tempMatrix.copyPosition(hips.matrix);
            hips.applyMatrix(new THREE.Matrix4().getInverse(tempMatrix));
            hips.applyMatrix(r);
            hips.applyMatrix(tempMatrix);

            leftLeg.applyMatrix(r1);
            rightLeg.applyMatrix(r2);
				
            camera.position.x = 50 * Math.cos(dtime / 10000);
            camera.position.z = 50 * Math.sin(dtime / 10000);
            camera.position.y = 20;
            camera.lookAt(origen);
            renderer.render(scene, camera);
        }
    </script><canvas width="1366" height="625" style="width: 1366px; height: 625px;"></canvas>
</body></html>
