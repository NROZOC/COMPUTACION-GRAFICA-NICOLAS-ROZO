<!DOCTYPE html>
<html>
    <head>
        <title>ESCENARIO CIRCO</title>
        <style>
            html, body { margin: 0; padding: 0; overflow: hidden; }
            #info {
                position: absolute;
                padding: 10px;
                width: 100%;
                text-align: center;
                color: #FFFF00;
            }
        </style>
    </head>
    <body>
        <script src="js/three.js"></script>
        <script src="js/three.min.js"></script>
        <script src="js/WebGL.js"></script>
        <script>
            var scene, aspect, camera, renderer;
            var startTime = Date.now();


            var hips, torso, head;
            var rightFoot, rightLeg, rightArm, rightHand;
            var leftFoot, leftLeg, leftArm, leftHand;

            var upArrow = false;
            var downArrow = false;
            var leftArrow = false;
            var rightArrow = false;

            var thetaSum = 0;
            var positivo = false;

            if (WEBGL.isWebGLAvailable() === false) {

                document.body.appendChild(WEBGL.getWebGLErrorMessage());

            }

            var scene, aspect, camera, renderer, controls;

            var spotLight = new THREE.SpotLight(0x8A8E13);
            spotLight.position.set(-20, 22, -15);

            var spotLight2 = new THREE.SpotLight(0x69138E);
            spotLight2.position.set(20, 22, -15);

            var spotLight3 = new THREE.SpotLight(0x2E8134);
            spotLight3.position.set(-15, 22, 20);

            var spotLight4 = new THREE.SpotLight(0x1F207E);
            spotLight4.position.set(15, 22, 20);

            var spotLight5 = new THREE.SpotLight(0x8C348C);
            spotLight5.position.set(-22, 22, -13);

            var spotLight6 = new THREE.SpotLight(0x935612);
            spotLight6.position.set(18, 22, -17);


            init();
            animate();
            function init() {

                if (WEBGL.isWebGLAvailable() === false) {
                    document.body.appendChild(WEBGL.getWebGLErrorMessage());
                }

                scene = new THREE.Scene();
                aspect = window.innerWidth / window.innerHeight
                camera = new THREE.PerspectiveCamera(45, aspect, 0.1, 1000);
                renderer = new THREE.WebGLRenderer();
                renderer.setSize(window.innerWidth, window.innerHeight);
                document.body.appendChild(renderer.domElement);

                var size = 50;
                var divisions = 50;
                var origin = new THREE.Vector3(0, 0, 0);
                var x = new THREE.Vector3(1, 0, 0);
                var y = new THREE.Vector3(0, 1, 0);
                var z = new THREE.Vector3(0, 0, 1);




                var onKeyDown = function (event) {
                    switch (event.keyCode) {
                        case 38: // TRASLADAR ADELANTE
                            upArrow = true;
                            break;
                        case 40: // TRASLADAR ATR√ÅS
                            downArrow = true;
                            break;
                        case 37: // ROTAR CW
                            leftArrow = true;
                            break;
                        case 39: // ROTAR CCW
                            rightArrow = true;
                            break;
                    }
                };

                var onKeyUp = function (event) {
                    switch (event.keyCode) {
                        case 38: // TRASLADAR
                            upArrow = false;
                            break;
                        case 40: // TRASLADAR
                            downArrow = false;
                            break;
                        case 37: // ROTAR CW
                            leftArrow = false;
                            break;
                        case 39: // ROTAR CCW
                            rightArrow = false;
                            break;
                    }
                };


                document.addEventListener('keydown', onKeyDown, false);
                document.addEventListener('keyup', onKeyUp, false);

                //hacer plano con cuadricula

                var gridHelperXY = new THREE.GridHelper(size, divisions);
                var gridHelperXZ = new THREE.GridHelper(size, divisions, 0xfff000, 0xffff0);
                var gridHelperYZ = new THREE.GridHelper(size, divisions);

                gridHelperXY.rotateOnWorldAxis(x, THREE.Math.degToRad(90));
                gridHelperXZ.rotateOnWorldAxis(y, THREE.Math.degToRad(90));
                gridHelperYZ.rotateOnWorldAxis(z, THREE.Math.degToRad(90));


                var ambient = new THREE.AmbientLight(0x8F8F7E, 0.6);
                scene.add(ambient);


                //EDIFICIO


                var boxGeometry = new THREE.BoxGeometry(250, 4, 250);
                var boxGeometry2 = new THREE.BoxGeometry(25, 10, 15);
                var boxGeometry3 = new THREE.BoxGeometry(10, 5, 35);
                var boxGeometry4 = new THREE.BoxGeometry(25, 25, 35);
                var boxGeometry5 = new THREE.BoxGeometry(30, 5, 35);
                var geometry = new THREE.CylinderGeometry(25, 25, 10, 32);
                var geometry2 = new THREE.SphereGeometry(1.5, 32, 32);
                var geometry3 = new THREE.CylinderGeometry(0.5, 0.5, 22, 32);
                var geometry4 = new THREE.TorusGeometry(25, 2, 16, 100);
                var geometry5 = new THREE.TorusGeometry(40, 2.5, 16, 100);
                var geometry6 = new THREE.TorusGeometry(45, 2.5, 16, 100);
                var geometry7 = new THREE.TorusGeometry(50, 2.5, 16, 100);
                var geometry8 = new THREE.TorusGeometry(55, 2.5, 16, 100);
                var geometry9 = new THREE.RingGeometry(30, 35, 32);


                var Metal = new THREE.TextureLoader().load('Texturas/ColorMetal.jpg');
                var MetalNormal = new THREE.TextureLoader().load('Texturas/NormalMetal.jpg');
                var Plastico = new THREE.TextureLoader().load('Texturas/ColorPlastico.png');
                var PlasticoNormal = new THREE.TextureLoader().load('Texturas/NormalPlastico.png');
                var Tela = new THREE.TextureLoader().load('Texturas/ColorTela.png');
                var TelaNormal = new THREE.TextureLoader().load('Texturas/NormalTela.png');
                var Cortina = new THREE.TextureLoader().load('Texturas/ColorCortina.jpg');
                var CortinaNormal = new THREE.TextureLoader().load('Texturas/NormalCortina.jpg');
                var Rombos = new THREE.TextureLoader().load('Texturas/ColorRombos.jpg');
                var RombosNormal = new THREE.TextureLoader().load('Texturas/NormaRombos.jpg');
                var Carpa = new THREE.TextureLoader().load('Texturas/ColorCarpa.jpg');
                var CarpaNormal = new THREE.TextureLoader().load('Texturas/NormaCarpa.jpg');


                var MetalMaterial = new THREE.MeshStandardMaterial({
                    color: 0xffffff,
                    metalness: 0.5,
                    roughness: 0.5,
                    map: Metal,
                    normalMap: MetalNormal
                });

                var PlasticoMaterial = new THREE.MeshStandardMaterial({
                    color: 0xffffff,
                    metalness: 0.8,
                    map: Plastico,
                    normalMap: PlasticoNormal
                });

                var TelaMaterial = new THREE.MeshStandardMaterial({
                    color: 0xC32B2B,
                    metalness: 0,
                    roughness: 1,
                    map: Tela,
                    normalMap: TelaNormal
                });

                var CortinaMaterial = new THREE.MeshStandardMaterial({
                    color: 0xffffff,
                    metalness: 0.9,
                    roughness: 1,
                    map: Cortina,
                    normalMap: CortinaNormal
                });

                var RombosMaterial = new THREE.MeshStandardMaterial({
                    color: 0xffffff,
                    metalness: 0,
                    roughness: 1,
                    map: Rombos,
                    normalMap: RombosNormal
                });

                var CarpaMaterial = new THREE.MeshStandardMaterial({
                    color: 0xffffff,
                    metalness: 0,
                    roughness: 1,
                    map: Carpa,
                    normalMap: CarpaNormal,
                    side: THREE.DoubleSide
                });

                

                //CREAR LOS MATERIALES

                var material = new THREE.MeshStandardMaterial({ color: 0xADADAD, metalness: 0.6, roughness: 0.9 });
                var material1 = new THREE.MeshStandardMaterial({ color: 0XFFD0B5, metalness: 0.4, roughness: 0.3, transparent: true, opacity: 1 });
                var material2 = new THREE.MeshStandardMaterial({ color: 0xA81414, metalness: 0.5, roughness: 0.9, side: THREE.DoubleSide});
                var material3 = new THREE.MeshBasicMaterial({ color: 0x8A8E13 });
                var material4 = new THREE.MeshBasicMaterial({ color: 0x69138E });
                var material5 = new THREE.MeshBasicMaterial({ color: 0x00FF13 });
                var material6 = new THREE.MeshBasicMaterial({ color: 0x0004FF});
                var material7 = new THREE.MeshBasicMaterial({ color: 0xFF00FF });
                var material8 = new THREE.MeshBasicMaterial({ color: 0xFF8700 });



                //CREAR LAS MALLAS
                var cube = new THREE.Mesh(boxGeometry, material);
                var cube2 = new THREE.Mesh(boxGeometry2, MetalMaterial);
                var cube3 = new THREE.Mesh(boxGeometry2, MetalMaterial);
                var cube4 = new THREE.Mesh(boxGeometry3, PlasticoMaterial);
                var cube5 = new THREE.Mesh(boxGeometry4, CortinaMaterial);
                var cube6 = new THREE.Mesh(boxGeometry5, RombosMaterial);
                var cube7 = new THREE.Mesh(boxGeometry5, RombosMaterial);
                var cube8 = new THREE.Mesh(boxGeometry5, RombosMaterial);
                var cylinder = new THREE.Mesh(geometry, PlasticoMaterial);
                var cylinder2 = new THREE.Mesh(geometry3, MetalMaterial);
                var cylinder3 = new THREE.Mesh(geometry3, MetalMaterial);
                var cylinder4 = new THREE.Mesh(geometry3, MetalMaterial);
                var cylinder5 = new THREE.Mesh(geometry3, MetalMaterial);
                var sphere = new THREE.Mesh(geometry2, material3);
                var sphere2 = new THREE.Mesh(geometry2, material4);
                var sphere3 = new THREE.Mesh(geometry2, material5);
                var sphere4 = new THREE.Mesh(geometry2, material6);
                var sphere5 = new THREE.Mesh(geometry2, material7);
                var sphere6 = new THREE.Mesh(geometry2, material8);
                var torus = new THREE.Mesh(geometry4, material);
                var torus2 = new THREE.Mesh(geometry5, TelaMaterial);
                var torus3 = new THREE.Mesh(geometry6, TelaMaterial);
                var torus4 = new THREE.Mesh(geometry7, TelaMaterial);
                var torus5 = new THREE.Mesh(geometry8, TelaMaterial);
                var mesh = new THREE.Mesh(geometry9, material2);

                mesh.rotateX(1.57);
                mesh.position.y = 2.1;

                cube2.position.x = 48;
                cube2.position.y = 8;
                cube2.rotateZ(0.5235);

                cube3.position.x = -48;
                cube3.position.y = 8;
                cube3.rotateZ(-0.5235);

                cube4.position.z = 40;
                cube4.position.y = 4;

                cube5.position.z = 50;
                cube5.position.y = 7;

                cube6.position.z = 50;
                cube6.position.y = 22;

                cube7.position.x = 12;
                cube7.position.z = 49.9;
                cube7.position.y = 5;
                cube7.rotateZ(-1.57);

                cube8.position.x = -12;
                cube8.position.z = 49.9;
                cube8.position.y = 5;
                cube8.rotateZ(1.57);

                sphere.position.x = -20;
                sphere.position.y = 22;
                sphere.position.z = -15;

                sphere2.position.x = 20;
                sphere2.position.y = 22;
                sphere2.position.z = -15;

                sphere5.position.x = -22;
                sphere5.position.y = 22;
                sphere5.position.z = -13;

                sphere6.position.x = 18;
                sphere6.position.y = 22;
                sphere6.position.z = -17;

                sphere3.position.x = -15;
                sphere3.position.y = 22;
                sphere3.position.z = 20;

                sphere4.position.x = 15;
                sphere4.position.y = 22;
                sphere4.position.z = 20;

                cylinder2.position.x = -21;
                cylinder2.position.y = 12;
                cylinder2.position.z = -14;

                cylinder3.position.x = 19;
                cylinder3.position.y = 12;
                cylinder3.position.z = -16;

                cylinder4.position.x = -15;
                cylinder4.position.y = 12;
                cylinder4.position.z = 20;

                cylinder5.position.x = 15;
                cylinder5.position.y = 12;
                cylinder5.position.z = 20;

                torus.rotateX(1.57);
                torus.position.y = 4;

                torus2.rotateX(1.57);
                torus2.position.y = 4;

                torus3.rotateX(1.57);
                torus3.position.y = 7;

                torus4.rotateX(1.57);
                torus4.position.y = 10;

                torus5.rotateX(1.57);
                torus5.position.y = 13;
                //PERSONA ANIMADA

                geometry9 = new THREE.BoxGeometry(1, 1, 1);
                geometry10 = new THREE.CylinderGeometry(.5, .5, 1, 32);
                var material10 = new THREE.MeshBasicMaterial({ color: 0x00FF1B });
                var material9 = new THREE.MeshBasicMaterial({ color: 0x0036FF });


                hips = new THREE.Mesh(geometry9, material10);
                hips.applyMatrix(new THREE.Matrix4().makeTranslation(0, 2, 0));

                leftFoot = hips.clone();

                torso = new THREE.Mesh(geometry10, material9);

                leftLeg = torso.clone();

                leftLeg.applyMatrix(new THREE.Matrix4().makeScale(.5, 2, .5));

                rightLeg = leftLeg.clone();

                leftLeg.applyMatrix(new THREE.Matrix4().makeTranslation(-.5, -1, 0));
                rightLeg.applyMatrix(new THREE.Matrix4().makeTranslation(.5, -1, 0));

                rightFoot = leftFoot.clone();

                leftFoot.applyMatrix(new THREE.Matrix4().getInverse(leftLeg.matrix));
                leftFoot.applyMatrix(new THREE.Matrix4().makeScale(.5, .5, 1));
                rightFoot.applyMatrix(new THREE.Matrix4().getInverse(rightLeg.matrix));
                rightFoot.applyMatrix(new THREE.Matrix4().makeScale(.5, .5, 1));
                leftFoot.applyMatrix(new THREE.Matrix4().makeTranslation(-.5, -1.25, 0));
                rightFoot.applyMatrix(new THREE.Matrix4().makeTranslation(.5, -1.25, 0));
                torso.applyMatrix(new THREE.Matrix4().makeTranslation(0, 1, 0));


                hips.add(torso);
                hips.add(leftLeg);
                hips.add(rightLeg);
                leftLeg.add(leftFoot);
                rightLeg.add(rightFoot);



                var points = [];
                points[0] = new THREE.Vector2(-2, 0);
                points[1] = new THREE.Vector2(-1.9, 0.6);
                points[2] = new THREE.Vector2(-1.6, 1.2);
                points[3] = new THREE.Vector2(-1.2, 1.6);
                points[4] = new THREE.Vector2(-0.6, 1.9);
                points[5] = new THREE.Vector2(0, 2);

                var carpa = new THREE.LatheGeometry(points, 32);
                var lathe = new THREE.Mesh(carpa, CarpaMaterial);
                lathe.applyMatrix(new THREE.Matrix4().makeScale(60, 60, 60));
                scene.add(lathe);





                scene.add(gridHelperXZ);
                scene.add(cube);
                scene.add(cube2);
                scene.add(cube3);
                scene.add(cube4);
                scene.add(cube5);
                scene.add(cube6);
                scene.add(cube7);
                scene.add(cube8);
                scene.add(cylinder);
                scene.add(cylinder2);
                scene.add(cylinder3);
                scene.add(cylinder4);
                scene.add(cylinder5);
                scene.add(sphere);
                scene.add(sphere2);
                scene.add(sphere3);
                scene.add(sphere4);
                scene.add(sphere5);
                scene.add(sphere6);
                scene.add(torus);
                scene.add(torus2);
                scene.add(torus3);
                scene.add(torus4);
                scene.add(torus5);
                scene.add(mesh);

                scene.add(spotLight, spotLight2, spotLight3, spotLight4, spotLight5, spotLight6);

                hips.position.y = 10;

                scene.add(hips);

                camera.position.y = 60;
                camera.position.z = -120;
                camera.lookAt(origin);

                renderer.render(scene, camera);
            }

            function animate() {
                render();
                requestAnimationFrame(animate);
            }

            function render() {
                var origen = new THREE.Vector3(0, 0, 0);
                var dtime = Date.now() - startTime;
                var tx = 0, ty = 0, tz = 0;	//Variables para traslacion
                var sc = 1;				//Variable para escala
                var theta = 0;			//Variable para √°ngulo de rotacion de piernas
                var sigma = 0;			//Variable para √°ngulo de rotaci√≥n de caderas

                if (thetaSum >= 60 * Math.PI / 180)
                    positivo = false;
                if (thetaSum <= -60 * Math.PI / 180)
                    positivo = true;

                if (upArrow) {
                    tx = 0; ty = 0; tz = .1;
                    if (positivo)
                        theta = .1;
                    else
                        theta = -.1;
                }
                if (downArrow) {
                    tx = 0; ty = 0; tz = -.1;
                    if (positivo)
                        theta = .1;
                    else
                        theta = -.1;
                }
                thetaSum += theta;

                if (rightArrow)
                    sigma = -.1;
                if (leftArrow)
                    sigma = .1;

                //MATRIZ DE TRASLACI√ìN
                var t = new THREE.Matrix4();
                t.set(1, 0, 0, tx,
                    0, 1, 0, ty,
                    0, 0, 1, tz,
                    0, 0, 0, 1);

                hips.matrix.multiply(t); 	//APLICAR LA TRASLACI√ìN A NIVEL LOCAL

                //ROTACIONES
                var ct1 = Math.cos(theta);
                var ct2 = Math.cos(-theta);
                var cs = Math.cos(sigma);
                var st1 = Math.sin(theta);
                var st2 = Math.sin(-theta);
                var ss = Math.sin(sigma);
                var r = new THREE.Matrix4();
                var r1 = new THREE.Matrix4();
                var r2 = new THREE.Matrix4();

                //MATRIZ DE ROTACI√ìN EN EJE Y
                r.set(cs, 0, ss, 0,
                    0, 1, 0, 0,
                    -ss, 0, cs, 0,
                    0, 0, 0, 1);
                //MATRICES DE ROTACI√ìN EN EJE LOCAL DE PIERNAS
                r1.set(1, 0, 0, 0,
                    0, ct1, -st1, 0,
                    0, st1, ct1, 0,
                    0, 0, 0, 1);
                r2.set(1, 0, 0, 0,
                    0, ct2, -st2, 0,
                    0, st2, ct2, 0,
                    0, 0, 0, 1);

                //ROTACION EN UN EJE PARALELO
                var tempMatrix = new THREE.Matrix4();
                tempMatrix.copyPosition(hips.matrix);
                hips.applyMatrix(new THREE.Matrix4().getInverse(tempMatrix));
                hips.applyMatrix(r);
                hips.applyMatrix(tempMatrix);

                leftLeg.applyMatrix(r1);
                rightLeg.applyMatrix(r2);

                spotLight.position.x = (Math.sin(dtime / 1000) * 1.2) + 4;
                spotLight.position.y = (Math.sin(dtime / 1000) * 1.2) + 22;
                spotLight.position.z = (Math.cos(dtime / 1000) * 1) + 4;

                spotLight2.position.x = (Math.cos(dtime / 1500) * 1.7) - 4;
                spotLight2.position.y = (Math.cos(dtime / 1500) * 1.7) + 22;
                spotLight2.position.z = (Math.sin(dtime / 1500) * 0.2) + 4;

                spotLight3.position.x = (Math.sin(dtime / 500) * 0.4) - 4;
                spotLight3.position.y = (Math.sin(dtime / 500) * 0.4) + 22;
                spotLight3.position.z = (Math.sin(dtime / 500) * 0.1) - 4;

                spotLight4.position.x = (Math.cos(dtime / 600) * 0.7) + 4;
                spotLight4.position.y = (Math.cos(dtime / 600) * 0.4) + 22;
                spotLight4.position.z = (Math.cos(dtime / 600) * 0.4) + 4;

                spotLight5.position.x = (Math.sin(dtime / 800) * 0.6) + 4;
                spotLight5.position.y = (Math.cos(dtime / 800) * 2) + 22;
                spotLight5.position.z = (Math.cos(dtime / 800) * 2) - 4;

                spotLight6.position.x = (Math.cos(dtime / 2000) * 2) - 4;
                spotLight6.position.y = (Math.sin(dtime / 2000) * 0.6) + 22;
                spotLight6.position.z = (Math.sin(dtime / 2000) * 0.6) - 4;

                camera.position.x = 100 * Math.cos(dtime / 10000);
                camera.position.z = -100 * Math.sin(dtime / 10000);
                camera.position.y = 60;
                camera.lookAt(origen);
                renderer.render(scene, camera);
            }
        </script>
    </body>
</html>
