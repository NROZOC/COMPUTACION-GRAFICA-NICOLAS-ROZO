 <!DOCTYPE html>
<html>
  <head>
    <title>BACKFACE CULLING</title>
    <style>
      html, body { margin: 0; padding: 0; overflow: hidden; }
    </style>
  </head>
  <body>
    <script src="js/three.js"></script>
    <script src="js/controls/OrbitControls.js"></script>
    <script src='js/libs/dat.gui.min.js'></script>
    <script>
		var scene, aspect, camera, camera2, renderer, controls;
        var mapWidth = 320, mapHeight = 240;
        var w = window.innerWidth, h = window.innerHeight;
        var frustumSize = 9;
		var startTime = Date.now();


        var raycaster = new THREE.Raycaster();
        var mouse = new THREE.Vector2();

		init();
		animate();
	
		function init(){
			scene = new THREE.Scene();
			scene.background = new THREE.Color( 0xAAAAAA );
			aspect = window.innerWidth / window.innerHeight;
			camera = new THREE.PerspectiveCamera( 45, aspect, 0.1, 1000);
			camera2 = new THREE.PerspectiveCamera(45, 1.33, 0.1, 50);
            cameraL = new THREE.PerspectiveCamera(45, 1.33, 0.1, 50);
			var helper = new THREE.CameraHelper(camera2);
            var helperL = new THREE.CameraHelper(cameraL);
			scene.add(helper);
            scene.add(helperL);
			renderer = new THREE.WebGLRenderer({antialias: true});
			renderer.setSize( window.innerWidth, window.innerHeight );
			document.body.appendChild( renderer.domElement );
			controls = new THREE.OrbitControls( camera, renderer.domElement );
            
			var vector = new THREE.Vector3();
			camera2.getWorldDirection(vector);
            cameraL.getWorldDirection(vector);
			console.log(vector);
			
			var size = 10;
			var arrowSize = 1;
			var divisions = size;
			var origin = new THREE.Vector3(0, 0, 0);
            var lateral = new THREE.Vector3(0, 0, -20);
			var x = new THREE.Vector3( 1, 0, 0 );
			var y = new THREE.Vector3( 0, 1, 0 );
		  	var z = new THREE.Vector3( 0, 0, 1 );
			var color1 = new THREE.Color( 0xFFFFFF );
		  	var color2 = new THREE.Color( 0x333333 );
		  	var colorR = new THREE.Color( 0xAA3333 );
		  	var colorG = new THREE.Color( 0x33AA33 );
		  	var colorB = new THREE.Color( 0x333366 );
		  
		  	//CREAR LAS GRILLAS PARA EL ESCENARIO
		  	var axesHelper = new THREE.AxesHelper( size );
		  	var gridHelperXY = new THREE.GridHelper( size, divisions, color1, color1);
		  	var gridHelperXZ = new THREE.GridHelper( size, divisions, color2, color2 );
		  	var gridHelperYZ = new THREE.GridHelper( size, divisions, color2, color2 );
            
            //ROTARLAS PARA QUE QUEDEN EN EL ESPACIO ADECUADO
            gridHelperXY.rotateOnWorldAxis ( x, THREE.Math.degToRad(90) );
            gridHelperXZ.rotateOnWorldAxis ( y, THREE.Math.degToRad(90) );
            gridHelperYZ.rotateOnWorldAxis ( z, THREE.Math.degToRad(90) );
            
            //CREAR LAS FLECHAS QUE INDICAN LOS EJES DE COORDENADAS 3D
            var arrowX = new THREE.ArrowHelper( x, origin, arrowSize, colorR );
            var arrowY = new THREE.ArrowHelper( y, origin, arrowSize, colorG );
            var arrowZ = new THREE.ArrowHelper( z, origin, arrowSize, colorB );
            
            //CREAR ILUMINACIÓN
            var ambient = new THREE.AmbientLight( 0xffffff, 2 );
            scene.add( ambient );
            
            var pointLight = new THREE.PointLight( 0xffffff, 1, 100 );
            pointLight.position.set( 5, 5, -5 );
            scene.add( pointLight );
            
			//CREAR LAS GEOMETRÍAS
			//Far plane
			var width = 16.0;
			var height = 9.0;
			var planeGeometry = new THREE.PlaneGeometry(width, height);

			//CUBO EN EL ESPACIO
			var boxGeometry = new THREE.BoxGeometry(4,5,3);
				
            //CREAR LOS MATERIALES
            var material1 = new THREE.MeshStandardMaterial( { color: 0xAA3333, metalness: 0.5, roughness: 0.1 } );
            var material2 = new THREE.MeshStandardMaterial( { color: 0x33AA33, metalness: 0.5, roughness: 0.1 } );
            var material3 = new THREE.MeshStandardMaterial( { color: 0x3333AA, metalness: 0.5, roughness: 0.1 } );
			
			//CREAR LOS OBJETOS
            scene.add( arrowX );
            scene.add( arrowY );
			scene.add(arrowZ);
            
			var geometry = new THREE.SphereGeometry(3, 8, 8);
			var geometry2 = new THREE.CylinderGeometry(2.5, 2.5, 4, 32);
			var geometry3 = new THREE.ConeGeometry(2.5, 4, 32);
            var geometry4 = new THREE.TorusKnotGeometry(2, 0.75, 100, 16);
			var meshMaterial = new THREE.MeshStandardMaterial( {color: 0x00ff00} );
			meshMaterial.vertexColors = THREE.FaceColors;
			
			var lineMaterial = new THREE.LineBasicMaterial( { color: 0xffffff, transparent: true, opacity: 0.5 } );
			
			var sphere = new THREE.Mesh(geometry, meshMaterial);
			var cube = new THREE.Mesh(boxGeometry, meshMaterial);
            var cube2 = new THREE.Mesh(boxGeometry, meshMaterial);
			var cilindro = new THREE.Mesh(geometry2, meshMaterial);
			var cono = new THREE.Mesh(geometry3, meshMaterial);
			var cono2 = new THREE.Mesh(geometry3, meshMaterial);
            var aro = new THREE.Mesh(geometry4, meshMaterial);
			var lines = new THREE.LineSegments( geometry, lineMaterial );
			var geometryMod = new THREE.Geometry;

			cube.position.x = 8;
			cube.position.z = -12;
			cube.position.y = 7;

            cube2.position.x = 8;
            cube2.position.z = -12;
            cube2.position.y = -7;

            cilindro.position.z = -7;
			cilindro.position.x = -6;

            cono.position.x = -6;
            cono.position.z = -7;
			cono.position.y = 4;

            cono2.position.x = -6;
            cono2.position.z = -7;
			cono2.position.y = -4;
			cono2.rotateX(3.141592);
			cono2.rotateY(3.141592);

			aro.position.z = -10;
			aro.position.x = 9;

			for(var i=0; i<sphere.geometry.faces.length; i++){
				if(vector.dot(sphere.geometry.faces[i].normal)>0){
					sphere.geometry.faces[i].color = new THREE.Color( 0xff0000 );
				}
			}		

			for (var i = 0; i < cube.geometry.faces.length; i++) {
				if (vector.dot(cube.geometry.faces[i].normal) > 0) {
					cube.geometry.faces[i].color = new THREE.Color(0xff0000);
                }
			}	

            for (var i = 0; i < cube2.geometry.faces.length; i++) {
                if (vector.dot(cube2.geometry.faces[i].normal) > 0) {
                    cube2.geometry.faces[i].color = new THREE.Color(0xff0000);
                }
            }

            for (var i = 0; i < cilindro.geometry.faces.length; i++) {
                if (vector.dot(cilindro.geometry.faces[i].normal) > 0) {
                    cilindro.geometry.faces[i].color = new THREE.Color(0xff0000);
                }
			}	

            for (var i = 0; i < cono.geometry.faces.length; i++) {
                if (vector.dot(cono.geometry.faces[i].normal) > 0) {
                    cono.geometry.faces[i].color = new THREE.Color(0xff0000);
                }
            }

            for (var i = 0; i < cono2.geometry.faces.length; i++) {
                if (vector.dot(cono2.geometry.faces[i].normal) > 0) {
                    cono2.geometry.faces[i].color = new THREE.Color(0xff0000);
                }
			}	

			for (var i = 0; i < aro.geometry.faces.length; i++) {
				if (vector.dot(aro.geometry.faces[i].normal) > 0) {
					aro.geometry.faces[i].color = new THREE.Color(0xff0000);
                }
            }
			
			var group = new THREE.Group();
			group.add(sphere);
			group.add(cube);
            group.add(cube2);
			group.add(cilindro);
            group.add(cono);
			group.add(cono2);
            group.add(aro);
			group.translateZ(-10);
			scene.add( group );
			
			camera.position.x = 5;
			camera.position.y = 5;
			camera.position.z = 10;


			cameraL.position.x = -30;
            cameraL.position.y = 15;
			cameraL.position.z = -20;
			cameraL.lookAt(lateral);
			
		  	camera.lookAt( origin );
		}
		function animate() {
			requestAnimationFrame( animate );
			controls.update(); // required if controls.enableDamping = true, or if controls.autoRotate = true
			render();
		}
        function render() {
            renderer.setViewport( 0, 0, w, h );
            renderer.setScissor( 0, 0, w, h );
            renderer.render( scene, camera );
            renderer.setViewport( 10, 10, mapWidth, mapHeight );
            renderer.setScissor( 10, 10, mapWidth, mapHeight );
            renderer.setScissorTest( true );
			renderer.render(scene, camera2);
            renderer.setViewport(10, 410, mapWidth, mapHeight);
            renderer.setScissor(10, 410, mapWidth, mapHeight);
            renderer.setScissorTest(true);
            renderer.render(scene, cameraL);
		}

       
        function onMouseMove(event) {

            mouse.x = (event.clientX / renderer.domElement.clientWidth) * 2 - 1;
            mouse.y = - (event.clientY / renderer.domElement.clientHeight) * 2 + 1;
            raycaster.setFromCamera(mouse, camera);


			var intersects = raycaster.intersectObject(group);


            if (intersects.length > 0) {

                helper.position.set(0, 0, 0);
                helper.lookAt(intersects[0].face.normal);

                helper.position.copy(intersects[0].point);

            }

        }

    </script>
  </body>
</html>
