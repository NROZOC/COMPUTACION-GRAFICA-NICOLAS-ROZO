<!DOCTYPE html>
<html>
  <head>
    <title>TAREA CSG</title>
    <style>
      html, body { margin: 0; padding: 0; overflow: hidden; }
    </style>
  </head>
  <body>
    <script src="js/three.js"></script>
	<script src="js/controls/OrbitControls.js"></script>
	<script src="js/csg.js"></script>
	<script src="js/THREE.CSG.js"></script>
    <script>
		var scene, aspect, camera, renderer, controls;
		init();
		animate();
		function init(){
			//INICIALIZACIÓN
			scene = new THREE.Scene();
            renderer = new THREE.WebGLRenderer({ antialias: true });
	        aspect = window.innerWidth / window.innerHeight;
	        camera = new THREE.PerspectiveCamera( 75, aspect, 0.1, 1000);
			renderer = new THREE.WebGLRenderer();
            renderer.setClearColor(0xF4F4E7);
	        renderer.setSize( window.innerWidth, window.innerHeight );
	        document.body.appendChild( renderer.domElement );
			controls = new THREE.OrbitControls( camera, renderer.domElement );
			
			//ELEMENTOS COMUNES
			var size = 10;
			var arrowSize = 1;
			var divisions = size;
			var origin = new THREE.Vector3( 0, 0, 0 );
			var x = new THREE.Vector3( 1, 0, 0 );
			var y = new THREE.Vector3( 0, 1, 0 );
		  	var z = new THREE.Vector3( 0, 0, 1 );
			var color = new THREE.Color(0x333333);
			var colorR = new THREE.Color(0xAA3333);
			var colorG = new THREE.Color(0x33AA33);
            var colorB = new THREE.Color(0x001EA7);
			
		  	//CREAR LAS GRILLAS PARA EL ESCENARIO
		  	var axesHelper = new THREE.AxesHelper( size );
			scene.add( axesHelper );
			
		  	var gridHelperXZ = new THREE.GridHelper( size, divisions, color, color );
			//scene.add( gridHelperXZ );
            
            //ROTARLAS PARA QUE QUEDEN EN EL ESPACIO ADECUADO
            gridHelperXZ.rotateOnWorldAxis ( y, THREE.Math.degToRad(90) );

            //CREAR ILUMINACIÓN
            var ambient = new THREE.AmbientLight( 0xffffff, 2 );
            scene.add( ambient );
			
            var pointLight = new THREE.PointLight( 0xffffff, 1, 100 );
            pointLight.position.set( -5, 3, 5 );
            scene.add( pointLight );
			
            var pointLight = new THREE.PointLight( 0xffffff, .5, 100 );
            pointLight.position.set( 5, 3, -5 );
            scene.add( pointLight );
			
			//CREAR LAS GEOMETRÍAS
			var boxGeometry = new THREE.BoxGeometry( 4.5, 4.5, 4.5 );
			var sphereGeometry = new THREE.SphereGeometry(3, 80, 80);
			var geometry = new THREE.CylinderBufferGeometry(1.5, 1.5, 40, 40);
            var material = new THREE.MeshBasicMaterial({ color: 0x0000ff });
           
            
						
			//CREAR LOS MATERIALES
            var material1 = new THREE.MeshStandardMaterial({ color: 0x5C5E61, metalness: 0.4, roughness: 0.3 });
			var material2 = new THREE.MeshStandardMaterial( { color: colorG, metalness: 0.5, roughness: 0.1, transparent:true, opacity: 0.5  } );
			
			//CREAR LAS MALLAS
			var cube = new THREE.Mesh( boxGeometry );
			var sphere = new THREE.Mesh(sphereGeometry);
			var cilindro = new THREE.Mesh(geometry, material);
			var cilindro2 = new THREE.Mesh(geometry, material);
            var cilindro3 = new THREE.Mesh(geometry, material);


			cilindro2.rotateX(1.57);
            cilindro3.rotateZ(1.57);
            
			
			//CONVERTIR A CSG
			var boxCSG = THREE.CSG.fromMesh( cube );
			var sphereCSG = THREE.CSG.fromMesh(sphere);
			var cilindroCSG = THREE.CSG.fromMesh(cilindro);
			var cilindro2CSG = THREE.CSG.fromMesh(cilindro2);
            var cilindro3CSG = THREE.CSG.fromMesh(cilindro3);
			
			//APLICAR LAS OPERACIONES
			var result1 = boxCSG.intersect(sphereCSG);	
			var result2 = cilindroCSG.union(cilindro2CSG);	
			
			//CONVERTIR A MALLA DE THREE JS NUEVAMENTE
			var C2T1 = THREE.CSG.toMesh(result1);
			var C2T2 = THREE.CSG.toMesh(result2);
			
			C2T1.material = material1; 
			C2T2.material = material1; 
			
			cube.material = material1;
			sphere.material = material2;
			

			var CRUZCSG = THREE.CSG.fromMesh(C2T2);
			var INTERSECCION2CSG = THREE.CSG.fromMesh(C2T1);

			var result3 = CRUZCSG.union(cilindro3CSG);

			var C2T3 = THREE.CSG.toMesh(result3);

			C2T3.material = material1; 

			var CUNIONCSG = THREE.CSG.fromMesh(C2T3);

			var result4 = INTERSECCION2CSG.subtract(CUNIONCSG);

            var C2T4 = THREE.CSG.toMesh(result4);

            C2T4.material = material1; 



			//AGREGAR A LA ESCENA LOS DIFERENTES ELEMENTOS
			//scene.add( cube );			
			//scene.add( C2T1 );
			//scene.add( C2T2 );
			//scene.add( C2T3 );
			scene.add( C2T4 );
			//scene.add(sphere);

			camera.position.x = 7;
			camera.position.y = 7;
		  	camera.position.z = 9;
			camera.lookAt( origin );
		}
		function animate(){
			requestAnimationFrame( animate );
			controls.update();
			render();
		}
		function render(){
			renderer.render( scene, camera );
		}
    </script>
  </body>
</html>
